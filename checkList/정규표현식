https://wikidocs.net/4308
https://nachwon.github.io/regular-expressions/


import re

compile() // ()안에 문자에 해당하는 정규표현식 클래스를 반환해줌

# p=re.compile('[a-z]+')
# p = re.compile('(\d+)([SDT])([*#]?)')
p=re.compile('(\d+)([SDT])([#*]?)')    //()는 튜플형태로 나타내려고
c=re.compile('\w*간\w*')               // \w* -> 아무 문자가 0번이상 나오고 가운데는 간, 그 뒤에도 문자 아무거나 0번 이상 나오면 되는 정규표현식
result = c.findall('간장 간간 장간 간와 와사비')
print(result) // 간장 간간 장간 간와




정규 표현식
---------------------------------문자열 매치--------------------------------
[]문자 클래스
[abc] #abc중 하나와 매치
[a-z] #소문자
[azA-z]#알파벳
[1-5] #1~5

'[] 안에서!!'  ^는 반대를 의미
[^abc] # a,b,c,를 제외한 모든 문자와 매치
[^0-9] # 숫자를 제외한 문자만 매치

\d  # =[0-9]
\D # =[^0-9] 비숫자
\w # =[a-zA-Z0-9] 숫자+문자
\W # =[^a-zA-Z0-9]
\s  # = 공백[\t\n\r\f\v]와 같다
\s # = 비공백

. 모든 문자
a.b # a+모든문자+b 의미  (\n제외한 모든문자와 매치)
aab #매치
a0b #매치
abc #매치 X

a[.]b 이면 원래의 의미인 마침표
a.b #매치
a0b #매치 X

* 반복
- *앞에 오는 문자가 0개를 포함하여 몇개가 오든 모두 매치된다.
lo*l
ll #매치 X
lol #매치
looool #매치
lbl #매치 X
loooobl #매치 X

+ 최소 한 번 이상 반복
lo+l
ll  #매치 X
lol #매치
looool #매치

? 없거나 하나 있거나
lo?l
ll #매치
lol #매치
loool #매치 X

{m, n} 반복 횟수 지정 // 앞의 문자가 m~n번 반복되면 매치
lo{3,5}l
ll #매치 X
lol #매치 X
loool #매치
loooool #매치
looooool #매치 X

|   or과 같다
a|b|c
a
b
c
a b
a b c
d #얘만 매치 X

$ 문자열의 제일 마지막과 배치
-문자일이 $의 앞에 있는 문자로 끝나면 매치(단 여러 줄인 경우 제일 마지막 줄만 매치)
a$
a #매치
aa #매치
baa #매치
aabb #매치 X

조건이 있는 표현식
'hello(?=world)' #hello뒤에 world 있으면 매치
'hello(?!=world)' #hello 뒤에 world가 없으면 매치
'hello(?!world)'

import re
p=re.compile(표현식)
----------------------------------match(문자열)-----------------------------
-검색하여 일치하지 않는 부분이 나올 때까지 찾는다.
-span은 일치하는곳 까지의 길이 return
p=re.compile('[a-z]+')
print(p.match("aabbcc").span()) // (0,6)
print(p.match("11bbcc").span() // p.match결과가 None이라서 .span()은 에러

----------------------------------search(문자열)-----------------------------
-처음 매치되는 문자열 찾음
p=re.compile("[a-z]+")
print(p.search("11aa").span()) // (2,4)
print(p.search("1111").span()) // None이라 span하면 error
----------------------------------findall(문자열)------------------------------
-문자열 내에서 일치하는 모든 패턴을 찾아 리스트로 반환 해준다.
p=re.compile('[a-z]+')
p.findall("a1bb1c1") // ['a','bb','c']

-------------------------------match,search의 메서드----------------------
일단 None이 아니어야함
span()
start()
end()
group() //매칭된 문자열




ex
p1 = re.compile('(\d+)([SDT])([*#]?)')
p2 = re.compile('[\d]+[SDT][*#]?')

p1.findall("1S2D*3T#") //[('1', 'S', ''), ('2', 'D', '*'), ('3', 'T', '#')]
p2.findall("1S2D*3T#") //['1S', '2D*', '3T#'] 해당 문자열 모두 찾아버림
