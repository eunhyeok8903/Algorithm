딕셔너리 생성/추가

a={}
a['a']=3
key값으로 음수도 가능
어떤 원소는 string으로 어떤원소는 리스트 어떤원소는 int형으로 해도 상관없다 key값 value값 모두 자유로움
(단 key값에는 리스트처럼 유동적인 자료형은 사용하지 못한다)
---------------------------------------------------------------------------
삭제
del(a[키값])

---------------------------------------------------------------------------
딕셔너리 갱신(키 중복 안됨)

a['a']=3
a['a']=2//2로 갱신
---------------------------------------------------------------------------
key 리스트 만들기

dic={1:'eunhyeok',2:'soyoung'}
a=list(dic.keys())// [1,2]
dic.keys()자체는 dict_keys([1,2])를 반환
dic.keys()라는 클래스임
max(dic.keys())하면 기본 라이브러리로 max에 dic.keys() 클래스도 알아서 찾아주는 라이브러리가 구현 되어 있는거임

---------------------------------------------------------------------------
dictionary key값 반복문으로 출력하기

dic={1:'eunhyeok',2:'soyoung'}
for k in dic.keys()
    print(k)

---------------------------------------------------------------------------
value 리스트 만들기

dic={1:'eunhyeok',2:'soyoung'}
a=list(dic.values())
dic.values() 자체는 dict_values(['eunhyeok','soyoung'] 반환
----------------------------------------------------------------------------
key나 value 조건달아서 리스트 만들기

dic={1:'eunhyeok',2:'soyoung'}
arr=[k for k,v in dic.items() if len(v)<=5]
----------------------------------------------------------------------------
key,value 쌍 얻기(items)

itmes는 (key,value)처럼 튜플형태로 반환
dic={1:'eunhyeok',2:'soyoung'}
a=list(dic.items())
dic.items() 자체는 dict_items(['eunhyeok','soyoung'] 반환
----------------------------------------------------------------------------
key로 value받을때
dic[1]로 접근해도되지만
dic.get(1) 로 가능

차이점
dic[1]은 key=1이 없을 경우 error
dic.get(1)은 None반환
------------------------------------------------------------------------------
해당 Key값이 있는지 확인
'eunhyeok' in dic
>>True
'eunhye' in dic
>>False
--------------------------------------------------------------------------------
딕셔너리 정렬 방법 정리
https://rfriend.tistory.com/473

딕셔너리 자체를 정렬하진 못하고 반환된값을 list로 받아서 정렬하여 사용

dic={3:'은혁',2:'진혁',4:'은영',-1:'은혜'}
li=list(dic.items())
print(li) #[(3, '은혁'), (2, '진혁'), (4, '은영'), (-1, '은혜')]
li.sort()
print(li) #[(-1, '은혜'), (2, '진혁'), (3, '은혁'), (4, '은영')]

value값 기준 정렬하려면
li=sorted(dic.items(), key= lambda x:x[1]) # value값 key는 x[0]



dic 정리 (시간복잡도가 다 O(1)이다.. len이나 iteration 당연한거 빼고)

---------------------------------len(d)--------------------------------------
(key:value)쌍 갯수 리턴
--------------------------------del d[key]----------------------------------
삭제
없는 key 삭제 시 에러
--------------------------------pop(key)------------------------------------
삭제
삭제하면서 value반환
없는 key 삭제 시 에러
--------------------------------popitem()-----------------------------------
제일 마지막 (key:value)쌍 삭제
얘넨 삽입 순서대로 쌓임
--------------------------------clear()----------------------------------------
모두 비우기
--------------------------------keys()----------------------------------------
d.keys() //iterable한 dict_keys(['a','b']) 반환
li= list(d.keys())
--------------------------------values()---------------------------------------
위와 동일
--------------------------------items()----------------------------------------
(key:value) 튜플 리스트 형태로 반환
--------------------------------정렬-------------------------------------------
keys,values,items를 리스트로 받아서 정렬하여 사용 하는것임
ex) sorted(d.items())

